-- This testBench was generated by pyVhdl2Sch --
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.all;


-- entity declaration
ENTITY tb_CharacterLogic IS
END tb_CharacterLogic;

ARCHITECTURE behavior OF tb_CharacterLogic IS
-- Component Declaration for the Unit Under Test (UUT)
COMPONENT CharacterLogic
PORT (
    X : IN INTEGER;
    Y : IN INTEGER;
    external : IN INTEGER;
    command : IN STD_LOGIC_VECTOR(0 to 5);
    Clk : IN STD_LOGIC;
    vSync : IN STD_LOGIC;
    fixedWallPresent : IN STD_LOGIC;
    breakWallPresent : IN STD_LOGIC;
    relativeX : OUT INTEGER;
    relativeY : OUT INTEGER;
    characterPresent : OUT STD_LOGIC;
    animationSeq : OUT INTEGER
);
END COMPONENT;
-- declare inputs and initialize them
    signal X : INTEGER := 0;
    signal Y : INTEGER := 0;
    signal external : INTEGER;
    signal command : STD_LOGIC_VECTOR(0 to 5);
    signal Clk : STD_LOGIC;
    signal vSync : STD_LOGIC;
    signal fixedWallPresent : STD_LOGIC;
    signal breakWallPresent : STD_LOGIC;
-- declare inouts and initialize them
-- declare outputs and initialize them
    signal relativeX : INTEGER;
    signal relativeY : INTEGER;
    signal characterPresent : STD_LOGIC;
    signal animationSeq : INTEGER;
	signal counterX : INTEGER := 1;
	signal counterY : INTEGER := 1;
    constant clk_period : time := 10 ns;

BEGIN
-- Instantiate the Unit Under Test (UUT)
uut: CharacterLogic PORT MAP (
    X => X,
    Y => Y,
    external => external,
    command => command,
    Clk => Clk,
    vSync => vSync,
    fixedWallPresent => fixedWallPresent,
    breakWallPresent => breakWallPresent,
    relativeX => relativeX,
    relativeY => relativeY,
    characterPresent => characterPresent,
    animationSeq => animationSeq
);
-- Clock process definitions( clock with 50% duty cycle is generated here.)
clk_process :process
begin
    --vSync <= '0';
    --wait for clk_period/2;  --for 5 ns signal is '0'.
    --vSync <= '1';
    --wait for clk_period/2;  --for 5 ns signal is '1'.
	counterX <= counterX + 1;
	If (counterX >= 640) then
		counterX <= 1;
		counterY <= counterY + 1;
	End If;
	If (counterY >= 480) then
		counterY <= 1;
		vSync <= '1';
	Else
		vSync <= '0';
	End If;
	X <= counterX - 1;
	Y <= counterY - 1;
	wait for clk_period/2;
	Clk <= '0';
	wait for clk_period/2;
	Clk <= '1';
end process;

-- Stimulus process
stim_proc: process
begin
	external <= 0;
	command <= "000100";
	fixedWallPresent <= '0';
	breakWallPresent <= '0';
	wait for 3*clk_period;
	-- Insert your tests
   wait;
end process;
END;